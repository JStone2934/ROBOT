// Generated by gencpp from file learning_action/ReadbookResult.msg
// DO NOT EDIT!


#ifndef LEARNING_ACTION_MESSAGE_READBOOKRESULT_H
#define LEARNING_ACTION_MESSAGE_READBOOKRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learning_action
{
template <class ContainerAllocator>
struct ReadbookResult_
{
  typedef ReadbookResult_<ContainerAllocator> Type;

  ReadbookResult_()
    : is_finish(false)  {
    }
  ReadbookResult_(const ContainerAllocator& _alloc)
    : is_finish(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_finish_type;
  _is_finish_type is_finish;





  typedef boost::shared_ptr< ::learning_action::ReadbookResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_action::ReadbookResult_<ContainerAllocator> const> ConstPtr;

}; // struct ReadbookResult_

typedef ::learning_action::ReadbookResult_<std::allocator<void> > ReadbookResult;

typedef boost::shared_ptr< ::learning_action::ReadbookResult > ReadbookResultPtr;
typedef boost::shared_ptr< ::learning_action::ReadbookResult const> ReadbookResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_action::ReadbookResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_action::ReadbookResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_action::ReadbookResult_<ContainerAllocator1> & lhs, const ::learning_action::ReadbookResult_<ContainerAllocator2> & rhs)
{
  return lhs.is_finish == rhs.is_finish;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_action::ReadbookResult_<ContainerAllocator1> & lhs, const ::learning_action::ReadbookResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::learning_action::ReadbookResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_action::ReadbookResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_action::ReadbookResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_action::ReadbookResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_action::ReadbookResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_action::ReadbookResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_action::ReadbookResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b856346ef49f692419615fadca72182";
  }

  static const char* value(const ::learning_action::ReadbookResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b856346ef49f692ULL;
  static const uint64_t static_value2 = 0x419615fadca72182ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_action::ReadbookResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_action/ReadbookResult";
  }

  static const char* value(const ::learning_action::ReadbookResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_action::ReadbookResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"bool is_finish\n"
;
  }

  static const char* value(const ::learning_action::ReadbookResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_action::ReadbookResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_finish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReadbookResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_action::ReadbookResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_action::ReadbookResult_<ContainerAllocator>& v)
  {
    s << indent << "is_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_finish);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_ACTION_MESSAGE_READBOOKRESULT_H
