// Generated by gencpp from file learning_action/ReadbookFeedback.msg
// DO NOT EDIT!


#ifndef LEARNING_ACTION_MESSAGE_READBOOKFEEDBACK_H
#define LEARNING_ACTION_MESSAGE_READBOOKFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learning_action
{
template <class ContainerAllocator>
struct ReadbookFeedback_
{
  typedef ReadbookFeedback_<ContainerAllocator> Type;

  ReadbookFeedback_()
    : reading_page(0)  {
    }
  ReadbookFeedback_(const ContainerAllocator& _alloc)
    : reading_page(0)  {
  (void)_alloc;
    }



   typedef uint32_t _reading_page_type;
  _reading_page_type reading_page;





  typedef boost::shared_ptr< ::learning_action::ReadbookFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_action::ReadbookFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ReadbookFeedback_

typedef ::learning_action::ReadbookFeedback_<std::allocator<void> > ReadbookFeedback;

typedef boost::shared_ptr< ::learning_action::ReadbookFeedback > ReadbookFeedbackPtr;
typedef boost::shared_ptr< ::learning_action::ReadbookFeedback const> ReadbookFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_action::ReadbookFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_action::ReadbookFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_action::ReadbookFeedback_<ContainerAllocator1> & lhs, const ::learning_action::ReadbookFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.reading_page == rhs.reading_page;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_action::ReadbookFeedback_<ContainerAllocator1> & lhs, const ::learning_action::ReadbookFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_action::ReadbookFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_action::ReadbookFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_action::ReadbookFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f5dbf4433d93835e3df512b2552dfeb";
  }

  static const char* value(const ::learning_action::ReadbookFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f5dbf4433d93835ULL;
  static const uint64_t static_value2 = 0xe3df512b2552dfebULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_action/ReadbookFeedback";
  }

  static const char* value(const ::learning_action::ReadbookFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"uint32 reading_page\n"
;
  }

  static const char* value(const ::learning_action::ReadbookFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reading_page);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReadbookFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_action::ReadbookFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_action::ReadbookFeedback_<ContainerAllocator>& v)
  {
    s << indent << "reading_page: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reading_page);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_ACTION_MESSAGE_READBOOKFEEDBACK_H
